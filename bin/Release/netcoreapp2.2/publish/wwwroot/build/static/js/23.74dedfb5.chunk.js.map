{"version":3,"sources":["webpack:///../Chop9ja-SPA/src/Components/SnackBar/SnackBar.tsx?c55c","webpack:///../Chop9ja-SPA/src/constants.ts?580e","Views/Admin/Settings/Settings.tsx"],"names":["Wrapper","styled","Box","_templateObject","iconVariant","error","Close","success","Validate","warning","Alert","SnackBarComponent","_ref","_ref$show","show","_ref$message","message","_ref$variant","variant","onClose","_ref$duration","duration","Icon","useEffect","setTimeout","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","react_transition_group__WEBPACK_IMPORTED_MODULE_8__","in","delay","classNames","timeout","elevation","background","align","justify","direction","grommet__WEBPACK_IMPORTED_MODULE_2__","plain","icon","color","onClick","grommet__WEBPACK_IMPORTED_MODULE_3__","__webpack_require__","d","__webpack_exports__","Masks","RegularExpressions","DateRanges","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","n","email","regexp","placeholder","fixed","phone","length","date","numbers","globalSpace","name","range","start","moment","startOf","toDate","end","endOf","subtract","Settings","_useState","useState","_useState2","Object","C_Users_princ_source_repos_Chop9ja_Chop9ja_SPA_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","state","_useState3","_useState4","newBankState","setNewBankState","_useState5","open","action","_useState6","popupState","setPopupState","_useState7","_useState8","newBankName","setNewBankName","_useState9","_useState10","loading","setLoading","size","useContext","ResponsiveContext","_useState11","_useState12","snackbar","setSnackbar","banks","BanksData","filter","b","isAvailable","actionsCount","knownAs","bank","getPaymentChannels","getBankAccounts","actionComplete","snackbarSuccess","Axios","get","then","res","status","paymentChannels","data","finally","bankAccounts","react__WEBPACK_IMPORTED_MODULE_15___default","Fragment","_Components_ProgressBar_ProgressBar__WEBPACK_IMPORTED_MODULE_16__","fill","height","_Components_SnackBar_SnackBar__WEBPACK_IMPORTED_MODULE_17__","s","C_Users_princ_source_repos_Chop9ja_Chop9ja_SPA_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_Components_Grommet_Popups_AssertivePopup__WEBPACK_IMPORTED_MODULE_21__","title","grommet__WEBPACK_IMPORTED_MODULE_4__","pad","round","width","style","minHeight","grommet__WEBPACK_IMPORTED_MODULE_6__","grommet__WEBPACK_IMPORTED_MODULE_7__","label","map","channel","index","array","key","alignSelf","grommet__WEBPACK_IMPORTED_MODULE_8__","src","logo","grommet__WEBPACK_IMPORTED_MODULE_9__","textAlign","grommet__WEBPACK_IMPORTED_MODULE_10__","toggle","checked","isActive","onChange","event","concat","type","post","updatePaymentChannel","account","bankId","margin","vertical","right","horizontal","accountName","flex","accountNumber","gap","grommet__WEBPACK_IMPORTED_MODULE_11__","padding","borderRadius","primary","id","grommet__WEBPACK_IMPORTED_MODULE_12__","value","ref","el","onSubmit","target","grommet__WEBPACK_IMPORTED_MODULE_13__","grommet__WEBPACK_IMPORTED_MODULE_14__","options","option","selected","required","validate","test","console","log","top"],"mappings":"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","file":"static/js/23.74dedfb5.chunk.js","sourcesContent":["import { Box, Button, Paragraph } from \"grommet\";\r\nimport { Alert, Close, Validate } from \"grommet-icons\";\r\nimport React, { useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styled from \"styled-components\";\r\nimport \"./SnackBar.css\";\r\n\r\nconst Wrapper = styled(Box)`\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\tz-index: 99999;\r\n\tposition: fixed;\r\n\tdisplay: none;\r\n\ttop: 0;\r\n\t@media (min-width: 900px) {\r\n\t\twidth: 500px\r\n\t}\r\n`;\r\n\r\nexport interface SnackBarProps {\r\n\tvariant: \"success\" | \"error\" | \"warning\" | string;\r\n\tmessage: string;\r\n\tonClose?: (event: React.MouseEvent<HTMLElement, MouseEvent> | null) => void;\r\n\tshow: boolean;\r\n\tduration?: number;\r\n}\r\n\r\nconst iconVariant = {\r\n\terror: Close,\r\n\tsuccess: Validate,\r\n\twarning: Alert,\r\n};\r\n\r\nconst SnackBarComponent = ({ show = false, message = \"Okay now\", variant = \"success\", onClose, duration = 5000 }: SnackBarProps) => {\r\n\t// @ts-ignore\r\n\tconst Icon = iconVariant[variant] as any;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (show) {\r\n\t\t\t// Wait for 4 seconds after displaying message then call the close function\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tonClose!(null);\r\n\t\t\t}, duration);\r\n\t\t}\r\n\t}, [show]);\r\n\r\n\treturn (\r\n\t\t<CSSTransition in={show} delay={500} classNames=\"SnackBar\" timeout={4500}>\r\n\t\t\t<Wrapper elevation=\"large\" background={variant} align=\"center\" justify=\"evenly\" direction=\"row\">\r\n\t\t\t\t<Button plain={true} icon={<Icon color=\"white\" />} onClick={onClose} color=\"white\" />\r\n\t\t\t\t<Paragraph>{message}</Paragraph>\r\n\t\t\t</Wrapper>\r\n\t\t</CSSTransition>\r\n\t);\r\n};\r\n\r\nexport default SnackBarComponent;\r\n","import {DateRange} from './Types';\r\nimport moment from \"moment\";\r\n\r\nexport const Masks = {\r\n    email: [\r\n        {\r\n            regexp: /^[\\w\\-_.]+$/,\r\n            placeholder: \"email\"\r\n        },\r\n        { fixed: \"@\" },\r\n        {\r\n            regexp: /^[\\w]+$/,\r\n            placeholder: \"example\"\r\n        },\r\n        { fixed: \".\" },\r\n        {\r\n            regexp: /^[\\w]+$/,\r\n            placeholder: \"com\"\r\n        }\r\n    ],\r\n    phone: [ { fixed: \"+234 \" },\r\n        {\r\n            length: 3,\r\n            regexp: /^(?!0)[0-9]{1,3}$/,\r\n        },\r\n        { fixed: \" \"},\r\n        {\r\n            length: 3,\r\n            regexp: /^[0-9]{1,3}$/,\r\n        },\r\n        { fixed: \" \"},\r\n        {\r\n            length: 4,\r\n            regexp: /^[0-9]{1,4}$/,\r\n        }\r\n    ],\r\n    date: [\r\n        { \r\n            length: [1, 2],\r\n            regexp: /^[1-2][0-9]$|^3[0-1]$|^0?[1-9]$|^0$/,\r\n            placeholder: \"dd\"\r\n        }, \r\n        { fixed: \"/\" },\r\n        { \r\n            length: [1, 2],\r\n            regexp: /^1[0,1-2]$|^0?[1-9]$|^0$/,\r\n            placeholder: \"mm\"\r\n        }, \r\n        { fixed: \"/\" },\r\n        {\r\n            length: 4,\r\n            regexp: /^[1-2]$|^19$|^20$|^19[0-9]$|^20[0-9]$|^19[0-9][0-9]$|^20[0-9][0-9]$/,\r\n            placeholder: \"yyyy\"\r\n        }\r\n    ]\r\n}\r\n\r\nexport const RegularExpressions = {\r\n    email: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    phone: /^[0-9]{11}$/,\r\n    numbers: /^[0-9]+$/,\r\n    globalSpace: /\\s/g,\r\n}\r\n\r\nexport type RangePointer = {\r\n    name: string;\r\n    range: () => DateRange;\r\n}\r\n\r\nexport const DateRanges: RangePointer[] = [\r\n    { name: \"Today\", range: () => {\r\n            return { start: moment().startOf(\"day\").toDate(),\r\n                end: moment().endOf(\"day\").toDate() }}\r\n    },\r\n    { name: \"Yesterday\", range: () => {\r\n            const d = moment().subtract(1, \"days\");\r\n            return { start: d.startOf(\"day\").toDate(),\r\n                end: d.endOf(\"day\").toDate() }}\r\n    },\r\n    { name: \"This week\", range: () => {\r\n            const d = moment();\r\n            return { start: d.startOf(\"week\").toDate(),\r\n                end: d.endOf(\"week\").toDate() }}\r\n    },\r\n    { name: \"Last week\", range: () => {\r\n            const d = moment().subtract(1, \"weeks\");\r\n            return { start: d.startOf(\"week\").toDate(),\r\n                end: d.endOf(\"week\").toDate() }}\r\n    },\r\n    { name: \"This month\", range: () => {\r\n            const d = moment();\r\n\r\n            return { start: d.startOf(\"month\").toDate(),\r\n                end: d.endOf(\"month\").toDate() }}\r\n    },\r\n    { name: \"Last Month\", range: () => {\r\n            const d = moment().subtract(1, \"months\");\r\n\r\n            return { start: d.startOf(\"month\").toDate(),\r\n                end: d.endOf(\"month\").toDate() }}\r\n    },\r\n    { name: \"Last 3 months\", range: () => {\r\n            const d = moment().subtract(3, \"months\");\r\n\r\n            return { start: d.startOf(\"month\").toDate(),\r\n                end: moment().endOf(\"month\").toDate() }}\r\n    },\r\n    { name: \"This year\", range: () => {\r\n            return { start: moment().startOf(\"year\").toDate(),\r\n                end: moment().endOf(\"year\").toDate() }}\r\n    },\r\n    { name: \"Last year\", range: () => {\r\n            const d = moment().subtract(1, \"years\");\r\n\r\n            return { start: d.startOf(\"year\").toDate(),\r\n                end: d.endOf(\"year\").toDate() }}\r\n    },\r\n    { name: \"All time\", range: () => {\r\n            return { start: moment('2000', 'YYYY').startOf(\"year\").toDate(),\r\n                end: moment().endOf(\"year\").toDate() }}\r\n    },\r\n]\r\n","import Axios, { AxiosError } from \"axios\";\r\nimport {\r\n\tAccordion,\r\n\tAccordionPanel,\r\n\tBox,\r\n\tButton,\r\n\tForm,\r\n\tFormField,\r\n\tHeading,\r\n\tImage,\r\n\tResponsiveContext,\r\n\tSelect,\r\n\tText,\r\n\tTextInput,\r\n    CheckBox,\r\n} from \"grommet\";\r\nimport { Add, Close } from \"grommet-icons\";\r\nimport { IPaymentChannel, IUserBank, IBank } from \"../../../Types\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport ProgressBar from \"../../../Components/ProgressBar/ProgressBar\";\r\nimport SnackBarComponent, { SnackBarProps } from \"../../../Components/SnackBar/SnackBar\";\r\nimport styled from \"styled-components\";\r\nimport Popup from \"reactjs-popup\";\r\nimport BanksData from \"../../../_data/banks.json\";\r\nimport { RegularExpressions } from \"../../../constants\";\r\nimport AssertivePopup, { AssertivePopupProps } from \"../../../Components/_Grommet/Popups/AssertivePopup\";\r\n\r\n//#region Types\r\ntype Model = {\r\n    paymentChannels: IPaymentChannel[];\r\n    bankAccounts: IUserBank[];\r\n}\r\n\r\n\r\ntype NewBankModel = {\r\n    accountName: string;\r\n    accountNumber: string;\r\n    bank: IBank;\r\n}\r\n//#endregion\r\n\r\n//#region Styled Components\r\nconst Wrapper = styled(Box)`\r\n\twidth: 100vw;\r\n\talign-items: center;\r\n\tpadding-bottom: 2rem;\r\n`;\r\n//#endregion\r\n\r\n//#region Elements\r\nlet elBankAccount: any;\r\nlet elBankAccountForm: any;\r\n//#endregion\r\n\r\nconst Settings = () => {\r\n    const [state, setState] = useState({} as Model);\r\n    const [newBankState, setNewBankState] = useState({} as NewBankModel);\r\n\r\n    const [popupState, setPopupState] = useState({open: false, message: \"\", action: () => {}} as AssertivePopupProps);\r\n\r\n    const [newBankName, setNewBankName] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const size = useContext(ResponsiveContext);\r\n    const [snackbar, setSnackbar] = useState({} as SnackBarProps);\r\n\r\n    const banks = BanksData.filter(b => b.isAvailable);//.filter(b => b.isAvailable) as IUserBank[];\r\n\r\n    let actionsCount = 2;\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        setNewBankName(banks[0].knownAs);\r\n        setNewBankState({ bank: banks[0] } as NewBankModel);\r\n        getPaymentChannels();\r\n        getBankAccounts();\r\n    }, []);\r\n\r\n    const actionComplete = () => {\r\n        actionsCount--;\r\n\r\n        if (actionsCount <= 0) {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const snackbarSuccess = () => {\r\n        setSnackbar({\r\n            show: true,\r\n            variant: \"success\",\r\n            message: \"Operation Successful!\"\r\n        });\r\n    }\r\n\r\n    const getPaymentChannels = () => {\r\n        Axios.get<IPaymentChannel[]>(\"/api/backOffice/Management/paymentChannels\").\r\n            then((res) => {\r\n                if (res.status == 200) {\r\n                    state.paymentChannels = res.data;\r\n                }\r\n            }).finally(() => actionComplete());\r\n            // TODO: Handle errors with stack notifications.\r\n    };\r\n    \r\n    const updatePaymentChannel = ({type, isActive}: {type: string, isActive: boolean}) => {\r\n        setLoading(true);\r\n        Axios.post(\"/api/backOffice/Management/paymentChannels/update\", { type, isActive })\r\n            .then((res) => {\r\n                if (res.status == 200) {\r\n                    snackbarSuccess();\r\n                }\r\n            }).finally(() => {\r\n                actionsCount = 1;\r\n                getPaymentChannels();\r\n            });\r\n            // TODO: Handle errors with stack notifications.\r\n    };\r\n\r\n    const getBankAccounts = () => {\r\n        Axios.get<IUserBank[]>(\"/api/backOffice/Management/bankAccounts\")\r\n            .then((res) => {\r\n                if (res.status == 200) {\r\n                    state.bankAccounts = res.data;\r\n                }\r\n            }).finally(() => actionComplete());\r\n            // TODO: Handle errors with stack notifications.\r\n    };\r\n\r\n    const addBankAccount = () => {\r\n        setLoading(true);\r\n        Axios.post(\"/api/backOffice/Management/bankAccounts/add\", \r\n            { accountName: newBankState.accountName, accountNumber: newBankState.accountNumber, \r\n                bankId: newBankState.bank.id \r\n            }).then((res) => {\r\n                if (res.status == 200) {\r\n                    snackbarSuccess();\r\n                }\r\n            }).finally(() => {\r\n                setNewBankState({} as NewBankModel);\r\n                setNewBankName(\"\");\r\n                actionsCount = 1;\r\n                getBankAccounts();\r\n            });\r\n            // TODO: Handle errors with stack notifications.\r\n    };\r\n\r\n    const removeBankAccount = (id: string) => {\r\n        setLoading(true);\r\n        Axios.post(\"/api/backOffice/Management/bankAccounts/remove\", { id })\r\n            .then((res) => {\r\n                if (res.status == 200) {\r\n                    snackbarSuccess();\r\n                }\r\n            }).finally(() => {\r\n                actionsCount = 1;\r\n                getBankAccounts();\r\n            });\r\n    }\r\n\r\n    const changePassword = () => {\r\n        \r\n    };\r\n\r\n    //#region Validation\r\n    const validateAccountNumber = () => {\r\n        if (!RegularExpressions.numbers.test(newBankState.accountNumber)) {\r\n            console.log(newBankState);\r\n            return \"Only numbers are allowed\";\r\n        } else if (newBankState.accountNumber.length < 10) {\r\n            return \"The account number must not be less than 10 digits\";\r\n        }\r\n        return \"\";\r\n    }\r\n    //#endregion\r\n\r\n\r\n    return (\r\n        <>\r\n            <ProgressBar\r\n\t\t\t\tshow={loading}\r\n\t\t\t/>\r\n            <Wrapper fill={true} justify=\"center\" direction=\"column\" height=\"100%\">\r\n                <SnackBarComponent\r\n\t\t\t\t\tmessage={snackbar.message}\r\n\t\t\t\t\tshow={snackbar.show}\r\n\t\t\t\t\tvariant={snackbar.variant}\r\n\t\t\t\t\tonClose={() => setSnackbar((s) => ({ ...s, show: false }))}\r\n\t\t\t\t/>\r\n                \r\n                <AssertivePopup \r\n                    title={popupState.title} open={popupState.open} \r\n                    message={popupState.message} action={popupState.action} size={size}\r\n                    onClose={() => {\r\n                        setPopupState({open: false, message: \"\", action: () => {}})\r\n                    }}\r\n                />\r\n\r\n                <Box \r\n                    background=\"white\"\r\n\t\t\t\t\tpad={size !== \"small\" ? \"large\" : \"medium\"}\r\n\t\t\t\t\tround=\"small\"\r\n\t\t\t\t\twidth=\"720px\"\r\n                    elevation=\"small\"\r\n                    style={{\r\n                        minHeight: \"600px\"\r\n                    }}\r\n\t\t\t\t>\r\n                    \r\n                    <Box width=\"100%\">\r\n                        <Accordion>\r\n                            <AccordionPanel label=\"Payment Channels\">\r\n                                {state.paymentChannels ? state.paymentChannels.map((channel, index, array) => (\r\n                                    <Box key={index}>\r\n                                        <Box direction=\"row\" justify=\"between\">\r\n                                            <Box width=\"50px\" justify=\"start\" alignSelf=\"start\">\r\n                                                <Image height=\"30px\" width=\"auto\" src={channel.logo}/>\r\n                                            </Box>\r\n                                            \r\n                                            <Box justify=\"start\" width=\"85%\" alignSelf=\"start\">\r\n                                                <Text textAlign=\"start\">{channel.name}</Text>\r\n                                            </Box>\r\n                                            \r\n                                            <Box alignSelf=\"end\">\r\n                                                <CheckBox toggle={true} checked={channel.isActive}\r\n                                                    onChange={(event: any) => {\r\n                                                        setPopupState({open: true, message: `${channel.name} will be ${!channel.isActive ? \"enabled\" : \"disabled\"}` \r\n                                                            + ` across the entire platform. Are you sure you would like to do this?`, action: () => updatePaymentChannel({type: channel.type, isActive: !channel.isActive})})\r\n                                                    }}\r\n                                                />\r\n                                            </Box>\r\n                                            \r\n                                        </Box>\r\n                                    </Box>\r\n                                )) : null}\r\n                            </AccordionPanel>\r\n\r\n                            <AccordionPanel label=\"Bank Accounts\">\r\n                                <>\r\n                                    {state.bankAccounts ? state.bankAccounts.map((account, index, array) => {\r\n                                        const bank = BanksData[account.bankId - 1];\r\n\r\n                                        return (\r\n\r\n                                        <Box key={index} direction=\"row\" justify=\"between\" align=\"center\">\r\n                                            <Box round=\"5px\" elevation=\"small\" margin={{ vertical: \"small\", right: \"30px\"}} \r\n                                                pad={{horizontal: \"medium\", vertical: \"small\"}}\r\n                                                width=\"95%\"\r\n                                            >\r\n                                                <Box direction=\"row\" justify=\"start\">\r\n                                                    <Box width=\"200px\">\r\n                                                        <Text textAlign=\"start\">{account.accountName}</Text>\r\n                                                    </Box>\r\n                                                    \r\n                                                    <Box width=\"100px\" flex=\"grow\">\r\n                                                        <Text textAlign=\"start\">{account.accountNumber}</Text>\r\n                                                    </Box>\r\n\r\n                                                    <Box alignSelf=\"end\" direction=\"row\" gap=\"small\">\r\n                                                        <Box width=\"100px\">\r\n                                                            <Text textAlign=\"start\">{bank.knownAs}</Text>\r\n                                                        </Box>\r\n\r\n                                                        <Box align=\"center\" justify=\"center\">\r\n                                                            <Image height=\"30px\" width=\"auto\" src={bank.logo} />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n\r\n                                            <Box width=\"50px\">\r\n                                                <Button gap=\"0px\" style={{padding: \"5px\", borderRadius: \"5px\"}} \r\n                                                    label=\"X\" primary={true} color=\"secondary\"\r\n                                                    onClick={() => setPopupState({open: true, message: `${account.accountName} ${account.accountNumber} from ${bank.knownAs} will be ` \r\n                                                    + `completely deleted from this platform.`, action: () => removeBankAccount(account.id)})}\r\n                                                />\r\n                                            </Box>\r\n                                        </Box>\r\n\r\n                                        )\r\n                                    }): null}\r\n\r\n                                    <Box\r\n                                        margin={{vertical: \"medium\"}}\r\n                                        elevation=\"small\"\r\n                                        width=\"100%\"\r\n                                        pad=\"medium\"\r\n                                    >\r\n                                        <Box>\r\n                                            <Form \r\n                                                value={newBankState} \r\n                                                ref={(el: any) => elBankAccountForm = el}\r\n                                                onSubmit={(event: any) => {\r\n                                                    elBankAccountForm = event.target\r\n                                                    addBankAccount();\r\n                                                }}>\r\n                                                <FormField \r\n                                                    ref={(el: any) => elBankAccount = el} \r\n                                                    label=\"Bank\"\r\n                                                    name=\"Bank\"\r\n                                                    value={newBankName}\r\n                                                    // validate={() => {\r\n                                                    //     if (!newBankState.bank) {\r\n                                                    //         return \"Please select a bank\";\r\n                                                    //     }\r\n                                                    //     return \"\";\r\n                                                    // }}\r\n                                                >\r\n                                                    <Select\r\n                                                        value={newBankName}\r\n                                                        placeholder=\"Select a bank\"\r\n                                                        options={banks.map((b) => b.knownAs)}\r\n                                                        onChange={(option) => {\r\n                                                            newBankState.bank = banks[option.selected] as IBank;\r\n                                                            setNewBankName(newBankState.bank.knownAs);\r\n                                                        }}\r\n                                                    />\r\n                                                </FormField>\r\n\r\n                                                <FormField label=\"Account Name\" name=\"accountName\"\r\n                                                    onChange={(event: any) => {\r\n                                                        newBankState.accountName = event.target.value;\r\n                                                    }}\r\n                                                    required={true}\r\n                                                />\r\n\r\n                                                <FormField label=\"Account Number\" name=\"accountNumber\"\r\n                                                    validate={validateAccountNumber}\r\n                                                    onChange={(event: any) => {\r\n                                                        newBankState.accountNumber = event.target.value;\r\n                                                    }}\r\n                                                />\r\n\r\n                                                <Box width=\"100%\" margin={{top: \"medium\"}}>\r\n                                                    <Button primary={true} color=\"secondary\" label=\"Add\" type=\"submit\"/>    \r\n                                                </Box>\r\n                                                \r\n                                            </Form>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </>\r\n                            </AccordionPanel>\r\n\r\n\r\n                        </Accordion>\r\n                    </Box>\r\n                </Box>\r\n            </Wrapper>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Settings;"],"sourceRoot":""}