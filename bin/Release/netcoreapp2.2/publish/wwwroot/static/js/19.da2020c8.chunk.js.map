{"version":3,"sources":["Components/SnackBar/SnackBar.tsx","Components/Hero/Hero.tsx","assets/images/dark-dashboard.jpg","Views/Admin/Claims/Claims.tsx"],"names":["Wrapper","styled","Box","_templateObject","iconVariant","error","Close","success","Validate","warning","Alert","SnackBarComponent","_ref","_ref$show","show","_ref$message","message","_ref$variant","variant","onClose","_ref$duration","duration","Icon","useEffect","setTimeout","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","react_transition_group__WEBPACK_IMPORTED_MODULE_8__","in","delay","classNames","timeout","elevation","background","align","justify","direction","grommet__WEBPACK_IMPORTED_MODULE_2__","plain","icon","color","onClick","grommet__WEBPACK_IMPORTED_MODULE_3__","grommet__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","grommet__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","n","Hero","text","image","size","useContext","ResponsiveContext","width","height","margin","top","concat","opacity","position","style","pad","responsive","fontWeight","module","exports","p","Claims","_useState","useState","_useState2","Object","C_Users_princ_source_repos_Chop9ja_Chop9ja_SPA_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","loading","setLoading","_useState3","_useState4","claims","setClaims","_useState5","_useState6","assertingChange","setAssertingChange","_useState7","_useState8","currentClaim","setCurrentClaim","_useState9","_useState10","currentClaimStatus","setCurrentClaimStatus","_useState11","_useState12","snackbar","setSnackbar","loadClaims","Axios","get","then","res","status","data","sort","b","dateA","Date","cashedOutOn","dateB","catch","err","console","log","finally","Fragment","_Components_SnackBar_SnackBar__WEBPACK_IMPORTED_MODULE_22__","s","C_Users_princ_source_repos_Chop9ja_Chop9ja_SPA_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_Components_Hero_Hero__WEBPACK_IMPORTED_MODULE_15__","BackOfficeDashboardImage","_Components_ProgressBar_ProgressBar__WEBPACK_IMPORTED_MODULE_21__","reactjs_popup__WEBPACK_IMPORTED_MODULE_20__","open","modal","closeOnDocumentClick","contentStyle","borderRadius","boxShadow","grommet__WEBPACK_IMPORTED_MODULE_4__","vertical","horizontal","grommet__WEBPACK_IMPORTED_MODULE_6__","level","grommet__WEBPACK_IMPORTED_MODULE_7__","grommet__WEBPACK_IMPORTED_MODULE_8__","primary","label","post","id","overflow","round","grommet__WEBPACK_IMPORTED_MODULE_9__","cellPadding","grommet__WEBPACK_IMPORTED_MODULE_10__","borderBottom","fontSize","grommet__WEBPACK_IMPORTED_MODULE_11__","grommet__WEBPACK_IMPORTED_MODULE_12__","scope","grommet__WEBPACK_IMPORTED_MODULE_13__","map","claim","index","key","padding","date","toLocaleDateString","BetPlatformData","find","f","platformId","name","slipNumber","odds","stake","toLocaleString","potentialWinnings","grommet__WEBPACK_IMPORTED_MODULE_14__","value","valueLabel","options","onChange","option"],"mappings":"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","file":"static/js/19.da2020c8.chunk.js","sourcesContent":["import { Box, Button, Paragraph } from \"grommet\";\r\nimport { Alert, Close, Validate } from \"grommet-icons\";\r\nimport React, { useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styled from \"styled-components\";\r\nimport \"./SnackBar.css\";\r\n\r\nconst Wrapper = styled(Box)`\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\tz-index: 99999;\r\n\tposition: fixed;\r\n\tdisplay: none;\r\n\ttop: 0;\r\n\t@media (min-width: 900px) {\r\n\t\twidth: 500px\r\n\t}\r\n`;\r\n\r\nexport interface SnackBarProps {\r\n\tvariant: \"success\" | \"error\" | \"warning\" | string;\r\n\tmessage: string;\r\n\tonClose?: (event: React.MouseEvent<HTMLElement, MouseEvent> | null) => void;\r\n\tshow: boolean;\r\n\tduration?: number;\r\n}\r\n\r\nconst iconVariant = {\r\n\terror: Close,\r\n\tsuccess: Validate,\r\n\twarning: Alert,\r\n};\r\n\r\nconst SnackBarComponent = ({ show = false, message = \"Okay now\", variant = \"success\", onClose, duration = 5000 }: SnackBarProps) => {\r\n\t// @ts-ignore\r\n\tconst Icon = iconVariant[variant] as any;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (show) {\r\n\t\t\t// Wait for 4 seconds after displaying message then call the close function\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tonClose!(null);\r\n\t\t\t}, duration);\r\n\t\t}\r\n\t}, [show]);\r\n\r\n\treturn (\r\n\t\t<CSSTransition in={show} delay={500} classNames=\"SnackBar\" timeout={4500}>\r\n\t\t\t<Wrapper elevation=\"large\" background={variant} align=\"center\" justify=\"evenly\" direction=\"row\">\r\n\t\t\t\t<Button plain={true} icon={<Icon color=\"white\" />} onClick={onClose} color=\"white\" />\r\n\t\t\t\t<Paragraph>{message}</Paragraph>\r\n\t\t\t</Wrapper>\r\n\t\t</CSSTransition>\r\n\t);\r\n};\r\n\r\nexport default SnackBarComponent;\r\n","import { Box, Heading, ResponsiveContext } from \"grommet\";\r\nimport React, { useContext } from \"react\";\r\n\r\ninterface IProps {\r\n\ttext: string | JSX.Element;\r\n\timage: string | JSX.Element;\r\n}\r\n\r\nconst Hero = ({ text, image }: IProps) => {\r\n\r\n\tconst size = useContext(ResponsiveContext);\r\n\r\n\treturn (\r\n\t\t<Box\r\n\t\t\twidth=\"100%\"\r\n\t\t\theight={size !== \"small\" ? \"400px\" : \"250px\"}\r\n\t\t\tmargin={{ top: size !== \"small\" ? \"-4.5rem\" : \"-1rem\" }}\r\n\t\t\tbackground={{\r\n\t\t\t\tcolor: \"brand\",\r\n\t\t\t\timage: `url(${image})`,\r\n\t\t\t\topacity: \"strong\",\r\n\t\t\t\tposition: \"center\",\r\n\t\t\t\tsize: \"cover\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Box\r\n\t\t\t\theight=\"100%\"\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tcolor: \"white\"\r\n\t\t\t\t\t,\r\n\t\t\t\t}}\r\n\t\t\t\tbackground=\"rgba(51, 51, 51, 0.5)\"\r\n\t\t\t\tpad=\"large\"\r\n\t\t\t\tresponsive={true}\r\n\t\t\t\tdirection=\"column\"\r\n\t\t\t\tjustify=\"end\"\r\n\t\t\t>\r\n\t\t\t\t<Heading\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfontWeight: 100,\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{text}\r\n\t\t\t\t</Heading>\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t)\r\n\t\t;\r\n}\r\n\t;\r\nexport default Hero;\r\n","module.exports = __webpack_public_path__ + \"static/media/dark-dashboard.01dfa71b.jpg\";","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Box, Image, Heading, Text, ResponsiveContext, Table, TableHeader, TableCell, TableBody, TableRow, DropButton, Select, Button } from 'grommet';\r\nimport Hero from '../../../Components/Hero/Hero';\r\nimport BackOfficeDashboardImage from \"../../../assets/images/dark-dashboard.jpg\";\r\nimport styled from 'styled-components';\r\nimport Axios from 'axios';\r\nimport { IBackOfficeClaims } from '../../../Types';\r\nimport BetPlatformData from \"../../../_data/betPlatforms.json\";\r\nimport Popup from 'reactjs-popup';\r\nimport ProgressBar from '../../../Components/ProgressBar/ProgressBar';\r\nimport SnackBarComponent, { SnackBarProps } from '../../../Components/SnackBar/SnackBar';\r\n\r\nconst Wrapper = styled(Box)`\r\n\twidth: 100vw;\r\n\talign-items: center;\r\n\tpadding-bottom: 2rem;\r\n\t@media (min-width: 768px) {\r\n\t\t// align-items: start;\r\n\t}\r\n`;\r\n\r\nconst Claims = () => {\r\n    const size = useContext(ResponsiveContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [claims, setClaims] = useState([] as IBackOfficeClaims[]);\r\n    const [assertingChange, setAssertingChange] = useState(false);\r\n    const [currentClaim, setCurrentClaim] = useState({} as IBackOfficeClaims);\r\n    const [currentClaimStatus, setCurrentClaimStatus] = useState(\"\");\r\n    const [snackbar, setSnackbar] = useState({} as SnackBarProps);\r\n\r\n    useEffect(() => {\r\n        loadClaims();\r\n    }, []);\r\n\r\n    const loadClaims = () => {\r\n        setLoading(true);\r\n        // TODO: Query results with search and date parameters\r\n        Axios.get<IBackOfficeClaims[]>(\"/api/backOffice/Accounts/claims\")\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    setClaims(res.data.sort((a, b) => {\r\n                        var dateA = new Date(a.cashedOutOn), dateB = new Date(b.cashedOutOn);\r\n    \t\t\t\t    return dateA > dateB ? -1 : dateA < dateB ? 1 : 0;\r\n                    }));\r\n                }\r\n            }).catch((err) => {\r\n                // Display some error message\r\n                console.log(err);\r\n            }).finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    const updateClaim = () => {\r\n        if (!currentClaim) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        Axios.post(\"/api/backOffice/Accounts/claims/update\", { id: currentClaim.id, status: currentClaimStatus })\r\n            .then((res) => {\r\n                if (res.status) {\r\n                    setSnackbar({\r\n                        message: `Successfully changed status to ${currentClaimStatus}`,\r\n                        variant: \"success\",\r\n                        show: true\r\n                    })\r\n                }\r\n            }).catch((err) => {\r\n                setSnackbar({\r\n                    message: \"An error occured while trying to update the claim, please try again.\",\r\n                    variant: \"error\",\r\n                    show: true\r\n                })\r\n            }).finally(() => {\r\n                loadClaims();\r\n            });\r\n    }\r\n\r\n\r\n\treturn (\r\n        <>\r\n\t\t<Wrapper>\r\n            <SnackBarComponent\r\n                message={snackbar.message}\r\n                show={snackbar.show}\r\n                variant={snackbar.variant}\r\n                onClose={() => setSnackbar((s) => ({ ...s, show: false }))}\r\n            />\r\n\r\n\t\t\t<Hero\r\n\t\t\t\timage={BackOfficeDashboardImage}\r\n\t\t\t\ttext=\"Claims\"\r\n\t\t\t/>\r\n\r\n                <ProgressBar\r\n                    show={loading}\r\n                />\r\n\r\n                <Popup position=\"center center\" open={assertingChange} modal\r\n\t\t\t\t\tcloseOnDocumentClick={true}\r\n\t\t\t\t\tonClose={() => setAssertingChange(false)}\r\n\t\t\t\t\tcontentStyle={{\r\n\t\t\t\t\t\twidth: size === \"small\" ? \"60%\" : \"400px\",\r\n\t\t\t\t\t\theight: size === \"small\" ? \"200px\" : \"300px\",\r\n\t\t\t\t\t\tborderRadius: \"20px\",\r\n\t\t\t\t\t\tboxShadow: \"6px 7px 13px -3px rgba(0,0,0,0.5)\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<Box width=\"100%\" height=\"100%\">\r\n\t\t\t\t\t\t<Box pad={{\r\n\t\t\t\t\t\t\t\tvertical: \"10px\",\r\n\t\t\t\t\t\t\t\thorizontal: size === \"small\" ? \"10px\" : \"20px\"\t\r\n\t\t\t\t\t\t\t}} align=\"center\"\r\n\t\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\t\theight=\"100%\"\r\n\t\t\t\t\t\t\tjustify=\"between\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Heading level=\"3\">\r\n\t\t\t\t\t\t\t\tAre you sure ? \r\n\t\t\t\t\t\t\t</Heading>\r\n\r\n\t\t\t\t\t\t\t<Text>\r\n                                {currentClaimStatus === \"Approved\" || currentClaimStatus === \"Declined\" ? \r\n                                `${currentClaimStatus} the current claim?` : \"Set current claim to Pending?\"}\r\n\t\t\t\t\t\t\t</Text>\t\t\r\n\r\n\t\t\t\t\t\t\t<Box direction=\"row\" width=\"100%\" justify=\"between\" pad={{horizontal: \"large\"}}>\r\n\t\t\t\t\t\t\t\t<Button primary={true} label=\"Yes\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n                                        setAssertingChange(false)\r\n                                        updateClaim();\r\n                                    }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Button primary={false} label=\"No\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => setAssertingChange(false)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Popup>\r\n\r\n            <Box justify=\"center\" align=\"center\">\r\n                <Box\r\n                    pad=\"large\"\r\n                    width={size !== \"small\" ? \"90vw\" : \"80vw\"}\r\n                    background=\"white\"\r\n                    overflow={{ horizontal: \"auto\" }}\r\n                    align=\"center\"\r\n                    justify=\"center\"\r\n                    round=\"small\"\r\n                    elevation=\"medium\"\r\n                    margin={{top: \"large\"}}\r\n                >\r\n                    <Table cellPadding=\"medium\">\r\n                        <TableHeader\r\n                            style={{\r\n                                borderBottom: \"solid 1px #ccc\",\r\n                                fontSize: \"14px !important\",\r\n                            }}\r\n                        >\r\n                            <TableRow>\r\n                                <TableCell scope=\"col\">\r\n                                    Created\r\n                                </TableCell>\r\n                                <TableCell scope=\"col\">\r\n                                    Date Claimed\r\n                                </TableCell>\r\n                                <TableCell scope=\"col\">\r\n                                    Bet Company\r\n                                </TableCell>\r\n                                <TableCell scope=\"col\">\r\n                                    Slip Number\r\n                                </TableCell>\r\n                                <TableCell scope=\"col\">\r\n                                    Odds\r\n                                </TableCell>\r\n                                <TableCell scope=\"col\">\r\n                                    <strong>\r\n                                        Stake\r\n                                    </strong>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <strong>\r\n                                        Potential Winnings\r\n                                    </strong>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    Status\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHeader>\r\n\r\n                        <TableBody>\r\n                            {claims.map((claim, index) => (\r\n                                <TableRow\r\n                                    key={index}\r\n                                    style={{\r\n                                        padding: \".1rem\",\r\n                                    }}\r\n                                >\r\n                                    <TableCell>\r\n                                        {new Date(claim.date as Date).toLocaleDateString()}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(claim.cashedOutOn as Date).toLocaleDateString()}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BetPlatformData.find((f) => f.id === claim.platformId)!.name}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {claim.slipNumber}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {claim.odds}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <strong>\r\n                                            {\"₦ \" + claim.stake.toLocaleString()}\r\n                                        </strong>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <strong>\r\n                                            {\"₦ \" + claim.potentialWinnings.toLocaleString()}\r\n                                        </strong>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {/* TODO: Use an enum */}\r\n                                        <Select\r\n                                            value={claim.status}\r\n                                            valueLabel={(\r\n                                                <Box\r\n                                                    round=\"small\"\r\n                                                    overflow=\"hidden\"\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {claim.status}\r\n                                                </Box>\r\n                                            )}\r\n                                            icon={true}\r\n                                            options={[\"Approved\", \"Declined\", \"Pending\"]}\r\n                                            onChange={({ option }) => {\r\n                                                setCurrentClaim(claim);\r\n                                                setCurrentClaimStatus(option);\r\n                                                setAssertingChange(true);\r\n                                            }}\r\n                                            plain\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>      \r\n                </Box>\r\n            </Box>\r\n\t\t\t\r\n\t\t</Wrapper>\r\n        </>\r\n\t)\r\n}\r\n\r\nexport default Claims;"],"sourceRoot":""}