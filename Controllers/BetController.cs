using AutoMapper;
using Chop9ja.API.Data;
using Chop9ja.API.Extensions;
using Chop9ja.API.Extensions.Attributes;
using Chop9ja.API.Extensions.UnityExtensions;
using Chop9ja.API.Models;
using Chop9ja.API.Models.Entities;
using Chop9ja.API.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using MongoDbGenericRepository.Models;
using NSwag.Annotations;
using Sieve.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace Chop9ja.API.Controllers
{
    /// <summary>
    /// Manages User Bets
    /// </summary>
    [AutoBuild]
    [ApiController]
    [Route("api/[controller]")]
    [AuthorizeRoles(UserRoles.Regular)]
    public class BetController : ControllerBase
    {
        #region Properties

        #region Services
        [DeepDependency]
        ILogger Logger { get; }

        [DeepDependency]
        UserManager<User> UserManager { get; }

        [DeepDependency]
        MongoDataContext DataContext { get; }

        [DeepDependency]
        IMapper Mapper { get; }

        [DeepDependency]
        IPaymentService PaymentService { get; }

        [DeepDependency]
        IEmailService EmailService { get; }

        [DeepDependency]
        ISmsService SmsService { get; }

        [DeepDependency]
        ISieveProcessor Sieve { get; }
        #endregion

        #endregion

        #region Methods

        #region RESTful API Calls
        /// <summary>
        /// Retrieve an insured bet
        /// </summary>
        /// <param name="slipNumber">Slip Number located in the bet slip. By design, 
        /// these values are expected to be unique to both users and bet platforms</param>
        /// <returns>Information about the insured bet</returns>
        [HttpGet]
        [SwaggerResponse(HttpStatusCode.OK, typeof(BetViewModel), Description = "Information about the bet slip")]
        [SwaggerResponse(HttpStatusCode.NotFound, typeof(NotFoundResult), Description = "The bet slip has not be insured by this user.")]
        [SwaggerResponse(HttpStatusCode.Unauthorized, typeof(UnauthorizedResult), Description = "Invalid User Credentials.")]
        public async Task<IActionResult> GetBet([FromQuery]string slipNumber)
        {
            string id = User.FindFirst("id").Value;
            User user = await UserManager.FindByIdAsync(id);

            if (user == null) return Unauthorized();

            Bet bet = await DataContext.Store
                .GetOneAsync<Bet>(b => b.SlipNumber == slipNumber && b.UserId == user.Id);

            if (bet == null)
                return NotFound("Could not locate that slip number for this account.");

            return Ok(Mapper.Map<BetViewModel>(bet));
        }

        /// <summary>
        /// Get a list of insured bets
        /// </summary>
        /// <param name="dateRange">The date range at that the bets where insured. When
        /// null this field will return an all time list of insured bets.</param>
        [HttpGet("all")]
        [SwaggerResponse(HttpStatusCode.OK, typeof(IEnumerable<BetViewModel>), Description = "Returns a list insured bets")]
        [SwaggerResponse(HttpStatusCode.Unauthorized, typeof(UnauthorizedResult), Description = "Invalid User Credentials.")]
        public async Task<IActionResult> GetBets([FromQuery]DateRange dateRange = null)
        {
            string id = User.FindFirst("id").Value;
            User user = await UserManager.FindByIdAsync(id);

            if (user == null) return Unauthorized();

            if (dateRange.AutoGenerated) dateRange = DateRange.AllTime;

            var bets = await user.GetBetsAsync(dateRange.Includes<Bet>());
            return Ok(Mapper.Map<IEnumerable<BetViewModel>>(bets));
        }

        /// <summary>
        /// Insure a bet
        /// </summary>
        /// <param name="model">Information about the bet to insure</param>
        [HttpPost("insure")]
        [SwaggerResponse(HttpStatusCode.OK, typeof(OkResult), Description = "The bet was successfully insured")]
        [SwaggerResponse(HttpStatusCode.BadRequest, typeof(string), Description = "* The same bet slip number was attempted to be insured more than once.\n* The user has insufficient funds.")]
        [SwaggerResponse(HttpStatusCode.Unauthorized, typeof(UnauthorizedResult), Description = "Invalid User Credentials.")]
        public async Task<IActionResult> InsureBet([FromBody]BetViewModel model)
        {
            string id = User.FindFirst("id").Value;
            User user = await UserManager.FindByIdAsync(id);

            if (user == null) return Unauthorized();

            /*
            bool exists = await DataContext.Store.AnyAsync<Bet>(b => 
                b.SlipNumber == model.SlipNumber
                && b.PlatformId == model.PlatformId);

            if (exists) return BadRequest($"The bet slip {model.SlipNumber} has already been registered on this platform.");
            */

            bool alreadyRegistered = await DataContext.Store.AnyAsync<Bet>(b =>
                b.SlipNumber == model.SlipNumber
                && b.UserId == user.Id
                && b.PlatformId == model.PlatformId
            );

            // if (alreadyRegistered) return BadRequest($"The bet slip {model.SlipNumber} has already been registered by the current user");

            if (user.Wallet.AvailableBalance < model.Stake)
                return BadRequest("Insufficient insurance funds");

            Bet bet = Mapper.Map<Bet>(model);
            await user.AddBetAsync(bet);

            await EmailService.SendEmailAsync(user.Email, $"Bet {bet.SlipNumber} has been successfully insured", $"Hello {user.FirstName} your bet ({bet.SlipNumber}) has successfully been insured. Best Of Luck!");
            await SmsService.SendMessage(user.FormattedPhoneNumber, $"Hello {user.FirstName} your bet ({bet.SlipNumber}) has successfully been insured. Best Of Luck!");

            await PaymentService.CreateTransaction(user.Wallet, model.Stake, TransactionType.Debit, ChannelType.Chop9ja);
            
            return Ok();
        }

        /// <summary>
        /// CashOut a bet
        /// </summary>
        [HttpPost("cashOut")]
        [SwaggerResponse(HttpStatusCode.OK, typeof(BetViewModel), Description = "The bet was successfully insured")]
        [SwaggerResponse(HttpStatusCode.NotFound, typeof(NotFoundResult), Description = "The provided bet slip number was not registered by the user")]
        [SwaggerResponse(HttpStatusCode.BadRequest, typeof(string), Description = "An unexpected error occured.")]
        public async Task<IActionResult> CashOutBet([FromBody]CashOutViewModel model)
        {
            string userId = User.FindFirst("id").Value;
            User user = await UserManager.FindByIdAsync(userId);

            if (user == null) return Unauthorized();

            Bet bet = await DataContext.Store
                .GetOneAsync<Bet>(b => b.SlipNumber == model.SlipNumber && b.UserId == user.Id);

            if (bet == null)
                return NotFound("Could not locate that slip number for this account.");

            bet.CashOutRequested = true;
            bet.CashedOutOnUtc = DateTime.UtcNow;

            if (!await DataContext.Store.UpdateOneAsync(bet))
                return BadRequest("An unexpected error occured while updating the bet.");

            await EmailService.SendEmailAsync(user.Email, $"Bet {bet.SlipNumber} cashout request is being reviewed", $"Hello {user.FirstName}, your request for cashout on ({bet.SlipNumber}) has been successfully registered. Our team will study your request and get back to you in 48 hours.");
            await SmsService.SendMessage(user.FormattedPhoneNumber, $"Hello {user.FirstName}, your request for cashout on ({bet.SlipNumber}) has been successfully registered. Our team will study your request and get back to you in 48 hours.");

            return Ok();
        }

        /// <summary>
        /// Get list of bet cashouts
        /// </summary>
        /// <param name="dateRange">The date range at which the bets where cashed out. When
        /// null this field will return an all time list of insured bets.</param>
        /// <returns></returns>
        [HttpGet("cashOut/all")]
        public async Task<IActionResult> GetCashOuts([FromQuery]DateRange dateRange = null)
        {
            if (dateRange.AutoGenerated) dateRange = DateRange.AllTime;

            string userId = User.FindFirst("id").Value;
            User user = await UserManager.FindByIdAsync(userId);

            if (user == null) return Unauthorized();

            // TODO: Put this expression in full
            var bets = await user.GetBetsAsync(dateRange.Includes<Bet>().CombineWithAndAlso(b => b.CashOutRequested));

            return Ok(Mapper.Map<IEnumerable<StagedBetViewModel>>(bets));
        }
        #endregion

        #endregion
    }
}
